openapi: 3.0.0
info:
  title: "LINGO Server"
  description: "API for the LINGO project"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Word:
      type: "object"
      required:
        - word
      properties:
        word:
          type: "string"
    Meaning:
      type: "object"
      required:
        - meaning
      properties:
        meaning:
          type: "string"
    Reflection:
      type: "object"
      required:
        - reflection
      properties:
        reflection:
          type: "string"
    User:
      type: "object"
      properties:
        first_name:
          type: "string"
        last_name:
          type: "string"
        email:
          type: "string"
        current_team:
          type: "integer"
    Team:
      type: "object"
      required:
        - team_name
      properties:
        team_name:
          type: "string"
    TeamId:
      type: "object"
      required:
        - current_team_id
      properties:
        current_team_id:
          type: "integer"

paths:
  /users:
    get:
      operationId: "api.users.get_all"
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Users"
      summary: "Return the list of users"
      responses:
        "200":
          description: "Successfully read list of users"

  /users/{user_id}:
    get:
      operationId: "api.users.get"
      parameters:
        - name: user_id
          in: path
          description: "ID of user to fetch"
          required: true
          schema:
            type: integer
      tags:
        - "Users"
      summary: "Return an individual user by id"
      responses:
        "200":
          description: "Successfully retrieved user"

  /users/{user_id}/teams:
    get:
      operationId: "api.teams.get_teams_for_user"
      parameters:
        - name: user_id
          in: path
          description: "ID of user to fetch"
          required: true
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Users"
        - "Teams"
      summary: "Return the teams for a specific user"
      responses:
        "200":
          description: "Successfully retrieved teams"

  /my/teams:
    get:
      operationId: "api.teams.get_my_teams"
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Users"
        - "Teams"
      summary: "Return the teams for the current user"
      responses:
        "200":
          description: "Successfully retrieved teams"
    post:
      operationId: "api.users.update_current_team"
      tags:
        - "Users"
        - "Teams"
      summary: "Update the current team"
      requestBody:
        description: "Information on the new current team"
        required: True
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamId"
      responses:
        "200":
          description: "Successfully updated current team"

  /my/userinfo:
    get:
      operationId: "api.users.get_my_user_info"
      tags:
        - "Users"
      summary: "Return the user info for the current user"
      responses:
        "200":
          description: "Successfully retrieved user info"

  /teams:
    get:
      operationId: "api.teams.get_all"
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Teams"
      summary: "Return the list of teams"
      responses:
        "200":
          description: "Successfully read list of teams"
    post:
      operationId: "api.teams.create"
      tags:
        - "Teams"
      summary: "Create a new team"
      requestBody:
        description: "Team to create"
        required: True
        x-body-name: "team"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
      responses:
        "200":
          description: "Successfully created team"

  /teams/{team_id}:
    get:
      operationId: "api.teams.get"
      parameters:
        - name: team_id
          in: path
          description: "ID of team to fetch"
          required: true
          schema:
            type: integer
      tags:
        - "Teams"
      summary: "Return an individual team by id"
      responses:
        "200":
          description: "Successfully retrieved team"
    put:
      operationId: "api.teams.update"
      tags:
        - "Teams"
      summary: "Update an existing team"
      requestBody:
        description: "Team to update"
        required: True
        x-body-name: "team"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
      responses:
        "200":
          description: "Successfully updated team"
    delete:
      operationId: "api.teams.delete"
      parameters:
        - name: team_id
          in: path
          description: "ID of team to delete"
          required: true
          schema:
            type: integer
      tags:
        - "Teams"
      summary: "Delete an individual team by id"
      responses:
        "200":
          description: "Successfully deleted team"

  /teams/{team_id}/words:
    get:
      operationId: "api.words.get_all_for_team"
      parameters:
        - name: team_id
          in: path
          description: "ID of team"
          required: true
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Words"
        - "Teams"
      summary: "Return the list of words for a given team"
      responses:
        "200":
          description: "Successfully read list of words for team"
    post:
      operationId: "api.words.create_for_team"
      tags:
        - "Words"
      summary: "Create a new word"
      requestBody:
        description: "Word to create"
        required: True
        x-body-name: "word"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Word"
      responses:
        "200":
          description: "Successfully created word"

  /teams/{team_id}/users:
    get:
      operationId: "api.users.get_all_for_team"
      parameters:
        - name: team_id
          in: path
          description: "ID of team"
          required: true
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Users"
        - "Teams"
      summary: "Return the list of users for a given team"
      responses:
        "200":
          description: "Successfully read list of users for team"

  /words:
    get:
      operationId: "api.words.get_all"
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Words"
      summary: "Return the list of words"
      responses:
        "200":
          description: "Successfully read list of words"
    post:
      operationId: "api.words.create"
      tags:
        - "Words"
      summary: "Create a new word"
      requestBody:
        description: "Word to create"
        required: True
        x-body-name: "word"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Word"
      responses:
        "200":
          description: "Successfully created word"
  /words/{word_id}:
    get:
      operationId: "api.words.get"
      parameters:
        - name: word_id
          in: path
          description: "ID of word to fetch"
          required: true
          schema:
            type: integer
      tags:
        - "Words"
      summary: "Return an individual word by id"
      responses:
        "200":
          description: "Successfully retrieved word"
    put:
      operationId: "api.words.update"
      tags:
        - "Words"
      summary: "Update an existing word"
      requestBody:
        description: "Word to update"
        required: True
        x-body-name: "word"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Word"
      responses:
        "200":
          description: "Successfully updated word"
    delete:
      operationId: "api.words.delete"
      parameters:
        - name: word_id
          in: path
          description: "ID of word to delete"
          required: true
          schema:
            type: integer
      tags:
        - "Words"
      summary: "Delete an individual word by id"
      responses:
        "200":
          description: "Successfully deleted word"

  /words/{word_id}/meanings:
    get:
      operationId: "api.meanings.get_all"
      parameters:
        - name: word_id
          in: path
          description: "ID of word for meanings being fetched"
          required: true
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Meanings"
      summary: "Return the list of meanings for a word"
      responses:
        "200":
          description: "Successfully read list of meanings"
    post:
      operationId: "api.meanings.create"
      tags:
        - "Meanings"
      summary: "Create a new meaning for a word"
      requestBody:
        description: "Meaning to create"
        required: True
        x-body-name: "meaning"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meaning"
      responses:
        "200":
          description: "Successfully created meaning for word"

  /meanings/{meaning_id}:
    get:
      operationId: "api.meanings.get"
      parameters:
        - name: meaning_id
          in: path
          description: "ID of meaning to fetch"
          required: true
          schema:
            type: integer
      tags:
        - "Meanings"
      summary: "Return an individual meaning by id"
      responses:
        "200":
          description: "Successfully retrieved meaning"
    put:
      operationId: "api.meanings.update"
      tags:
        - "Meanings"
      summary: "Update an existing meaning"
      requestBody:
        description: "Meaning to update"
        required: True
        x-body-name: "meaning"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meaning"
      responses:
        "200":
          description: "Successfully updated meaning"
    delete:
      operationId: "api.meanings.delete"
      parameters:
        - name: meaning_id
          in: path
          description: "ID of meaning to delete"
          required: true
          schema:
            type: integer
      tags:
        - "Meanings"
      summary: "Delete an individual meaning by id"
      responses:
        "200":
          description: "Successfully deleted meaning"

  /words/{word_id}/reflections:
    get:
      operationId: "api.reflections.get_all"
      parameters:
        - name: word_id
          in: path
          description: "ID of word for reflections being fetched"
          required: true
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, onlyActive, onlyDeleted]
          required: false
      tags:
        - "Reflections"
      summary: "Return the list of reflections for a word"
      responses:
        "200":
          description: "Successfully read list of reflections"
    post:
      operationId: "api.reflections.create"
      tags:
        - "Reflections"
      summary: "Create a new reflection for a word"
      requestBody:
        description: "Reflection to create"
        required: True
        x-body-name: "reflection"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reflection"
      responses:
        "200":
          description: "Successfully created reflection for word"

  /reflections/{reflection_id}:
    get:
      operationId: "api.reflections.get"
      parameters:
        - name: reflection_id
          in: path
          description: "ID of reflection to fetch"
          required: true
          schema:
            type: integer
      tags:
        - "Reflections"
      summary: "Return an individual reflection by id"
      responses:
        "200":
          description: "Successfully retrieved reflection"
    put:
      operationId: "api.reflections.update"
      tags:
        - "Reflections"
      summary: "Update an existing reflection"
      requestBody:
        description: "Reflection to update"
        required: True
        x-body-name: "reflection"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reflection"
      responses:
        "200":
          description: "Successfully updated reflection"
    delete:
      operationId: "api.reflections.delete"
      parameters:
        - name: reflection_id
          in: path
          description: "ID of reflection to delete"
          required: true
          schema:
            type: integer
      tags:
        - "Reflections"
      summary: "Delete an individual reflection by id"
      responses:
        "200":
          description: "Successfully deleted reflection"
